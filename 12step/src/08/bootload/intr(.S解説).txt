#include "intr.h"
	.h8300h
	.section .text

	.global	_intr_softerr
#	.type	_intr_softerr,@function
_intr_softerr:
/*割り込みハンドラに入り口でスタックポインタを割り込みスタックに切り替える用に修正*/
/*現在のスタックポイントであるspのアドレスの箇所にer6を退避させる。
この時点でスタックポイントが4byte分減算される。
この時点で設定されてるスタックポイントはもともと一つのスタックポインタである。
この後退避させた後に割り込み用のスタックを用意したい*/
	mov.l	er6,@-er7　
	mov.l	er5,@-er7
	mov.l	er4,@-er7
	mov.l	er3,@-er7
	mov.l	er2,@-er7
	mov.l	er1,@-er7
	mov.l	er0,@-er7
/*レジスタに現在のスタックポイント(機能が全部一緒のスタックポインタ)を退避させる
/*この時点でsp(スタックポインタ)を書き換える可能*/
	mov.l	er7,er1　
/*新に割り込み用のスタックを用意。*/
/*以下で割り込みスタックのアドレスに今までの内容（割り込みの内容）をspに置き換えしている*/
    	mov.l   #_intrstack,sp
/*新に作った割り込み用のスタックに内容を移す*/
    	mov.l   er1,@-er7
	mov.w	#SOFTVEC_TYPE_SOFTERR,r0
	jsr	@_interrupt
/*元に戻す作業*/
/*もとのspの値を割り込みスタックから復旧*/
    	mov.l   @er7+,er1
/*spを元のspとする*/
    	mov.l   er1,er7
	mov.l	@er7+,er0
	mov.l	@er7+,er1
	mov.l	@er7+,er2
	mov.l	@er7+,er3
	mov.l	@er7+,er4
	mov.l	@er7+,er5
	mov.l	@er7+,er6
	rte

	.global	_intr_syscall
#	.type	_intr_syscall,@function
_intr_syscall:
	mov.l	er6,@-er7
	mov.l	er5,@-er7
	mov.l	er4,@-er7
	mov.l	er3,@-er7
	mov.l	er2,@-er7
	mov.l	er1,@-er7
	mov.l	er0,@-er7
	mov.l	er7,er1
    mov.l   #_intrstack,sp
    mov.l   er1,@-er7
	mov.w	#SOFTVEC_TYPE_SYSCALL,r0
	jsr	@_interrupt
    mov.l   @er7+,er1
    mov.l   er1,er7
	mov.l	@er7+,er0
	mov.l	@er7+,er1
	mov.l	@er7+,er2
	mov.l	@er7+,er3
	mov.l	@er7+,er4
	mov.l	@er7+,er5
	mov.l	@er7+,er6
	rte

	.global	_intr_serintr
#	.type	_intr_serintr,@function
_intr_serintr:
	mov.l	er6,@-er7
	mov.l	er5,@-er7
	mov.l	er4,@-er7
	mov.l	er3,@-er7
	mov.l	er2,@-er7
	mov.l	er1,@-er7
	mov.l	er0,@-er7
	mov.l	er7,er1
    mov.l   #_intrstack,sp
    mov.l   er1,@-er7
	mov.w	#SOFTVEC_TYPE_SERINTR,r0
	jsr	@_interrupt
    mov.l   @er7+,er1
    mov.l   er1,er7
	mov.l	@er7+,er0
	mov.l	@er7+,er1
	mov.l	@er7+,er2
	mov.l	@er7+,er3
	mov.l	@er7+,er4
	mov.l	@er7+,er5
	mov.l	@er7+,er6
	rte
